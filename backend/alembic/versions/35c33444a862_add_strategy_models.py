"""add_strategy_models

Revision ID: 35c33444a862
Revises: 8089e10e8636
Create Date: 2025-07-18 12:55:35.798125

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '35c33444a862'
down_revision: Union[str, Sequence[str], None] = '8089e10e8636'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('factor_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='因子模型名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='因子模型描述'),
    sa.Column('factors', sa.JSON(), nullable=True, comment='因子列表'),
    sa.Column('factor_weights', sa.JSON(), nullable=True, comment='因子权重'),
    sa.Column('model_parameters', sa.JSON(), nullable=True, comment='模型参数'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否活跃'),
    sa.Column('last_updated', sa.DateTime(), nullable=True, comment='最后更新时间'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_factor_models_id'), 'factor_models', ['id'], unique=False)
    op.create_table('market_regimes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regime_name', sa.String(length=50), nullable=False, comment='状态名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='状态描述'),
    sa.Column('economic_cycle', sa.String(length=20), nullable=True, comment='经济周期'),
    sa.Column('market_sentiment', sa.String(length=20), nullable=True, comment='市场情绪'),
    sa.Column('volatility_regime', sa.String(length=20), nullable=True, comment='波动率状态'),
    sa.Column('regime_indicators', sa.JSON(), nullable=True, comment='状态指标'),
    sa.Column('transition_probabilities', sa.JSON(), nullable=True, comment='转移概率'),
    sa.Column('start_date', sa.DateTime(), nullable=True, comment='开始日期'),
    sa.Column('end_date', sa.DateTime(), nullable=True, comment='结束日期'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_market_regimes_id'), 'market_regimes', ['id'], unique=False)
    op.create_table('strategies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='策略名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='策略描述'),
    sa.Column('strategy_type', sa.Enum('MACRO_TIMING', 'SECTOR_ROTATION', 'MULTI_FACTOR', 'MOMENTUM', 'MEAN_REVERSION', 'ARBITRAGE', 'CUSTOM', name='strategytype'), nullable=False, comment='策略类型'),
    sa.Column('asset_class', sa.Enum('STOCK', 'BOND', 'COMMODITY', 'CASH', 'REAL_ESTATE', 'ALTERNATIVE', name='assetclass'), nullable=False, comment='目标资产类别'),
    sa.Column('parameters', sa.JSON(), nullable=True, comment='策略参数配置'),
    sa.Column('risk_level', sa.Integer(), nullable=True, comment='风险等级(1-5)'),
    sa.Column('expected_return', sa.Float(), nullable=True, comment='预期年化收益率'),
    sa.Column('max_drawdown', sa.Float(), nullable=True, comment='最大回撤限制'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否活跃'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_strategies_id'), 'strategies', ['id'], unique=False)
    op.create_table('backtest_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False, comment='策略ID'),
    sa.Column('start_date', sa.DateTime(), nullable=False, comment='回测开始日期'),
    sa.Column('end_date', sa.DateTime(), nullable=False, comment='回测结束日期'),
    sa.Column('initial_capital', sa.Float(), nullable=False, comment='初始资金'),
    sa.Column('total_return', sa.Float(), nullable=True, comment='总收益率'),
    sa.Column('annualized_return', sa.Float(), nullable=True, comment='年化收益率'),
    sa.Column('volatility', sa.Float(), nullable=True, comment='波动率'),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True, comment='夏普比率'),
    sa.Column('sortino_ratio', sa.Float(), nullable=True, comment='索提诺比率'),
    sa.Column('max_drawdown', sa.Float(), nullable=True, comment='最大回撤'),
    sa.Column('calmar_ratio', sa.Float(), nullable=True, comment='卡玛比率'),
    sa.Column('var_95', sa.Float(), nullable=True, comment='95%置信度VaR'),
    sa.Column('cvar_95', sa.Float(), nullable=True, comment='95%置信度CVaR'),
    sa.Column('beta', sa.Float(), nullable=True, comment='贝塔系数'),
    sa.Column('alpha', sa.Float(), nullable=True, comment='阿尔法系数'),
    sa.Column('total_trades', sa.Integer(), nullable=True, comment='总交易次数'),
    sa.Column('winning_trades', sa.Integer(), nullable=True, comment='盈利交易次数'),
    sa.Column('losing_trades', sa.Integer(), nullable=True, comment='亏损交易次数'),
    sa.Column('win_rate', sa.Float(), nullable=True, comment='胜率'),
    sa.Column('avg_win', sa.Float(), nullable=True, comment='平均盈利'),
    sa.Column('avg_loss', sa.Float(), nullable=True, comment='平均亏损'),
    sa.Column('profit_factor', sa.Float(), nullable=True, comment='盈亏比'),
    sa.Column('performance_data', sa.JSON(), nullable=True, comment='绩效数据(净值曲线等)'),
    sa.Column('trade_log', sa.JSON(), nullable=True, comment='交易记录'),
    sa.Column('factor_analysis', sa.JSON(), nullable=True, comment='因子分析结果'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_backtest_results_id'), 'backtest_results', ['id'], unique=False)
    op.create_table('strategy_signals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False, comment='策略ID'),
    sa.Column('market_data_id', sa.Integer(), nullable=False, comment='市场数据ID'),
    sa.Column('signal_type', sa.Enum('BUY', 'SELL', 'HOLD', 'OVERWEIGHT', 'UNDERWEIGHT', name='signaltype'), nullable=False, comment='信号类型'),
    sa.Column('signal_strength', sa.Float(), nullable=True, comment='信号强度(0-1)'),
    sa.Column('target_weight', sa.Float(), nullable=True, comment='目标权重'),
    sa.Column('confidence_score', sa.Float(), nullable=True, comment='置信度分数'),
    sa.Column('reasoning', sa.Text(), nullable=True, comment='信号推理过程'),
    sa.Column('factors', sa.JSON(), nullable=True, comment='影响因子'),
    sa.Column('signal_date', sa.DateTime(), nullable=False, comment='信号日期'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['market_data_id'], ['market_data.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_strategy_signals_id'), 'strategy_signals', ['id'], unique=False)
    op.create_table('portfolio_allocations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False, comment='策略ID'),
    sa.Column('portfolio_id', sa.Integer(), nullable=False, comment='投资组合ID'),
    sa.Column('allocation_date', sa.DateTime(), nullable=False, comment='配置日期'),
    sa.Column('target_weights', sa.JSON(), nullable=True, comment='目标权重配置'),
    sa.Column('actual_weights', sa.JSON(), nullable=True, comment='实际权重配置'),
    sa.Column('rebalance_reason', sa.Text(), nullable=True, comment='调仓原因'),
    sa.Column('risk_metrics', sa.JSON(), nullable=True, comment='风险指标'),
    sa.Column('expected_return', sa.Float(), nullable=True, comment='预期收益'),
    sa.Column('is_executed', sa.Boolean(), nullable=True, comment='是否已执行'),
    sa.Column('execution_date', sa.DateTime(), nullable=True, comment='执行日期'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_portfolio_allocations_id'), 'portfolio_allocations', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_portfolio_allocations_id'), table_name='portfolio_allocations')
    op.drop_table('portfolio_allocations')
    op.drop_index(op.f('ix_strategy_signals_id'), table_name='strategy_signals')
    op.drop_table('strategy_signals')
    op.drop_index(op.f('ix_backtest_results_id'), table_name='backtest_results')
    op.drop_table('backtest_results')
    op.drop_index(op.f('ix_strategies_id'), table_name='strategies')
    op.drop_table('strategies')
    op.drop_index(op.f('ix_market_regimes_id'), table_name='market_regimes')
    op.drop_table('market_regimes')
    op.drop_index(op.f('ix_factor_models_id'), table_name='factor_models')
    op.drop_table('factor_models')
    # ### end Alembic commands ###
